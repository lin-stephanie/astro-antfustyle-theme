---
import { getCollection, getEntry } from 'astro:content'

import Categorizer from '~/components/base/Categorizer.astro'
import ListItem from '~/components/views/ListItem.astro'
import Toc from '~/components/toc/Toc.astro'
import Warning from '~/components/base/Warning.astro'

import { FEATURES } from '~/config'
import { isSameYear, getYear } from '~/utils/datetime'
import { getFilteredPosts, getSortedPosts } from '~/utils/post'

import type {
  CollectionEntry,
  ContentCollectionKey,
  DataCollectionKey,
} from 'astro:content'
import type { StreamGroupsSchema } from '~/content/schema'

interface Props {
  collectionType: ContentCollectionKey | DataCollectionKey
  pageToc: boolean
}

const { collectionType, pageToc } = Astro.props
const validCollectionType = ['blog', 'changelog', 'streams', 'feeds']

/* Toc */
const { toc } = FEATURES
const tocEnabled = Array.isArray(toc) && toc[0] && pageToc
let years: string[] = []

/* Posts */
let blogItems: CollectionEntry<ContentCollectionKey>[]
let sortedBlogItems: CollectionEntry<ContentCollectionKey>[] = []

if (collectionType === 'blog' || collectionType === 'changelog') {
  blogItems = await getFilteredPosts(collectionType)
  sortedBlogItems = getSortedPosts(blogItems)

  if (tocEnabled) {
    const yearsSet = new Set<number>()
    sortedBlogItems.forEach((item) => {
      const year = getYear(item.data.pubDate)
      yearsSet.add(year)
    })

    years = Array.from(yearsSet)
      .sort((a, b) => b - a)
      .map((year) => year.toString())
  }
}

/* Streams */
let streamItems: StreamGroupsSchema
let sortedStreamItems: StreamGroupsSchema = []

if (collectionType === 'streams') {
  const streamData = await getEntry(collectionType, 'data')
  streamItems = streamData.data.streams

  sortedStreamItems = streamItems.sort(
    (a, b) => b.pubDate.valueOf() - a.pubDate.valueOf()
  )

  if (tocEnabled) {
    const yearsSet = new Set<number>()
    sortedStreamItems.forEach((item) => {
      const year = getYear(item.pubDate)
      yearsSet.add(year)
    })

    years = Array.from(yearsSet)
      .sort((a, b) => b - a)
      .map((year) => year.toString())
  }
}

/* Feeds */
let feedItems: CollectionEntry<'feeds'>[]
let sortedFeedItems: CollectionEntry<'feeds'>[] = []

if (collectionType === 'feeds') {
  feedItems = await getCollection(collectionType)

  sortedFeedItems = feedItems.sort((a, b) => {
    if (!a.data.pubdate || !b.data.pubdate)
      throw new Error("Feed item is missing 'pubdate' field.")

    return b.data.pubdate.valueOf() - a.data.pubdate.valueOf()
  })

  if (tocEnabled) {
    const yearsSet = new Set<number>()
    sortedFeedItems.forEach((item) => {
      const year = getYear(item.data.pubdate as Date)
      yearsSet.add(year)
    })

    years = Array.from(yearsSet)
      .sort((a, b) => b - a)
      .map((year) => year.toString())
  }
}

/* Exception */
const warningHTML = `The '${collectionType}' collection type does not
  belong to the built-in types 'blog', 'feeds', or 'streams'. You may
  need to modify the <code>ListView.astro</code> logic for your defined
  collection types to render the list.`
---

{tocEnabled && <Toc {years} />}

{
  (collectionType === 'blog' || collectionType === 'changelog') && (
    <div aria-label="Post list">
      {sortedBlogItems.length === 0 ? (
        <div class="py-2 op-50">nothing here yet</div>
      ) : (
        sortedBlogItems.map(async (item, idx) => {
          const { data, slug } = item
          const { remarkPluginFrontmatter } = await item.render()
          const minutesRead =
            data.minutesRead || remarkPluginFrontmatter.minutesRead

          return (
            <>
              {!isSameYear(
                data.pubDate,
                sortedBlogItems[idx - 1]?.data.pubDate
              ) && (
                <Categorizer
                  {idx}
                  needId={tocEnabled}
                  text={getYear(data.pubDate).toString()}
                />
              )}
              <ListItem
                {idx}
                {collectionType}
                redirect={data.redirect}
                postSlug={slug}
                title={data.title}
                video={data.video}
                radio={data.radio}
                date={data.pubDate}
                {minutesRead}
                platform={data.platform}
              />
            </>
          )
        })
      )}
    </div>
  )
}

{
  collectionType === 'streams' && (
    <div aria-label="Stream list">
      {sortedStreamItems.length === 0 ? (
        <div class="py-2 op-50">nothing here yet</div>
      ) : (
        sortedStreamItems.map((item, idx) => {
          return (
            <>
              {!isSameYear(
                item.pubDate,
                sortedStreamItems[idx - 1]?.pubDate
              ) && (
                <Categorizer
                  {idx}
                  needId={tocEnabled}
                  text={getYear(item.pubDate).toString()}
                />
              )}
              <ListItem
                {idx}
                {collectionType}
                redirect={item.link}
                title={item.title}
                video={item.video}
                radio={item.radio}
                date={item.pubDate}
                platform={item.platform}
              />
            </>
          )
        })
      )}
    </div>
  )
}

{
  collectionType === 'feeds' && (
    <div aria-label="Feed list">
      {sortedFeedItems.length === 0 ? (
        <div class="py-2 op-50">nothing here yet</div>
      ) : (
        sortedFeedItems.map((item, idx) => {
          const { data } = item
          if (!data.link)
            throw new Error(
              `Feed item with id '${item.id}' is missing 'link' field.`
            )
          if (!data.title)
            throw new Error(
              `Feed item with id '${item.id}' is missing 'title' field.`
            )

          return (
            <>
              {!isSameYear(
                item.data.pubdate as Date,
                sortedFeedItems[idx - 1]?.data.pubdate as Date
              ) && (
                <Categorizer
                  {idx}
                  needId={tocEnabled}
                  text={getYear(item.data.pubdate as Date).toString()}
                />
              )}
              <ListItem
                {idx}
                {collectionType}
                redirect={item.data.link as string}
                title={item.data.title as string}
                date={item.data.pubdate as Date | string}
              />
            </>
          )
        })
      )}
    </div>
  )
}

{
  !validCollectionType.includes(collectionType) && (
    <Warning rawHTMLString={warningHTML} />
  )
}
