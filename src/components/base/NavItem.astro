---
import Link from '~/components/base/Link.astro'
import { ensureTrailingSlash, getUrl } from '~/utils/common'
import type { InternalNav, SocialLink } from '~/types'

type Props =
  | {
      type: 'internal'
      item: InternalNav
      mergeOnMobile: boolean
      mobileItemType?: 'text' | 'icon'
    }
  | {
      type: 'social'
      item: SocialLink
      mergeOnMobile: boolean
      mobileItemType?: 'text' | 'icon'
    }

const { type, item, mergeOnMobile, mobileItemType } = Astro.props
---

{
  type === 'internal' &&
    (mergeOnMobile ? (
      !mobileItemType ? (
        <Link
          class="lt-md:hidden op-transition"
          href={getUrl(ensureTrailingSlash(item.path))}
          title={item.title}
          aria-current={
            Astro.url.pathname === getUrl(ensureTrailingSlash(item.path))
              ? 'page'
              : false
          }
        >
          {(item.displayMode === 'alwaysIcon' ||
            item.displayMode === 'iconHiddenOnMobile' ||
            item.displayMode === 'iconToTextOnMobile') && (
            <div class={item.icon} />
          )}
          {(item.displayMode === 'alwaysText' ||
            item.displayMode === 'textHiddenOnMobile' ||
            item.displayMode === 'textToIconOnMobile') && (
            <span>{item.text}</span>
          )}
        </Link>
      ) : mobileItemType === 'text' ? (
        (item.displayMode === 'alwaysText' ||
          item.displayMode === 'iconToTextOnMobile') && (
          <li class="block py-3 border-b b-[var(--c-scrollbar)] leading-6">
            <Link
              class="block op-transition"
              href={getUrl(ensureTrailingSlash(item.path))}
              title={item.title}
              aria-current={
                Astro.url.pathname === getUrl(ensureTrailingSlash(item.path))
                  ? 'page'
                  : false
              }
            >
              <span>{item.text}</span>
            </Link>
          </li>
        )
      ) : (
        (item.displayMode === 'alwaysIcon' ||
          item.displayMode === 'textToIconOnMobile') && (
          <Link
            class="block op-transition"
            href={getUrl(ensureTrailingSlash(item.path))}
            title={item.title}
            aria-current={
              Astro.url.pathname === getUrl(ensureTrailingSlash(item.path))
                ? 'page'
                : false
            }
          >
            <div class={item.icon} />
          </Link>
        )
      )
    ) : (
      <Link
        class={`${
          item.displayMode === 'iconHiddenOnMobile' ||
          item.displayMode === 'textHiddenOnMobile'
            ? 'lt-md:hidden'
            : ''
        } op-transition`}
        href={getUrl(ensureTrailingSlash(item.path))}
        title={item.title}
        aria-current={
          Astro.url.pathname === getUrl(ensureTrailingSlash(item.path))
            ? 'page'
            : false
        }
      >
        {(item.displayMode === 'alwaysText' ||
          item.displayMode === 'textHiddenOnMobile') && (
          <span>{item.text}</span>
        )}
        {(item.displayMode === 'alwaysIcon' ||
          item.displayMode === 'iconHiddenOnMobile') && (
          <div class={item.icon} />
        )}
        {item.displayMode === 'textToIconOnMobile' && (
          <>
            <span class="lt-md:hidden">{item.text}</span>
            <div class={`md:hidden ${item.icon}`} />
          </>
        )}
        {item.displayMode === 'iconToTextOnMobile' && (
          <>
            <span class="md:hidden">{item.text}</span>
            <div class={`lt-md:hidden ${item.icon}`} />
          </>
        )}
      </Link>
    ))
}
{
  type === 'social' &&
    (mergeOnMobile ? (
      !mobileItemType ? (
        <Link
          class="lt-md:hidden op-transition"
          href={item.link}
          title={item.title}
          rel="me"
          external={true}
        >
          {(item.displayMode === 'alwaysIcon' ||
            item.displayMode === 'iconHiddenOnMobile' ||
            item.displayMode === 'iconToTextOnMobile') && (
            <div class={item.icon} />
          )}
          {(item.displayMode === 'alwaysText' ||
            item.displayMode === 'textHiddenOnMobile' ||
            item.displayMode === 'textToIconOnMobile') && (
            <span>{item.text}</span>
          )}
        </Link>
      ) : mobileItemType === 'text' ? (
        (item.displayMode === 'alwaysText' ||
          item.displayMode === 'iconToTextOnMobile') && (
          <li class="block py-3 border-b b-[var(--c-scrollbar)] leading-6">
            <Link
              class="block op-transition"
              href={item.link}
              title={item.title}
              rel="me"
              external={true}
            >
              <span>{item.text}</span>
            </Link>
          </li>
        )
      ) : (
        (item.displayMode === 'alwaysIcon' ||
          item.displayMode === 'textToIconOnMobile') && (
          <Link
            class="block op-transition"
            href={item.link}
            title={item.title}
            rel="me"
            external={true}
          >
            <div class={item.icon} />
          </Link>
        )
      )
    ) : (
      <Link
        class={`${
          item.displayMode === 'iconHiddenOnMobile' ||
          item.displayMode === 'textHiddenOnMobile'
            ? 'lt-md:hidden'
            : ''
        } op-transition`}
        href={item.link}
        title={item.title}
        rel="me"
        external={true}
      >
        {(item.displayMode === 'alwaysText' ||
          item.displayMode === 'textHiddenOnMobile') && (
          <span>{item.text}</span>
        )}
        {(item.displayMode === 'alwaysIcon' ||
          item.displayMode === 'iconHiddenOnMobile') && (
          <div class={item.icon} />
        )}
        {item.displayMode === 'textToIconOnMobile' && (
          <>
            <span class="lt-md:hidden">{item.text}</span>
            <div class={`md:hidden ${item.icon}`} />
          </>
        )}
        {item.displayMode === 'iconToTextOnMobile' && (
          <>
            <span class="md:hidden">{item.text}</span>
            <div class={`lt-md:hidden ${item.icon}`} />
          </>
        )}
      </Link>
    ))
}
